{
    "openapi": "3.1.0",
    "info": {
        "title": "Tabby Server",
        "description": "\n[![tabby stars](https://img.shields.io/github/stars/TabbyML/tabby)](https://github.com/TabbyML/tabby)\n[![Join Slack](https://shields.io/badge/Join-Tabby%20Slack-red?logo=slack)](https://links.tabbyml.com/join-slack)\n\nInstall following IDE / Editor extensions to get started with [Tabby](https://github.com/TabbyML/tabby).\n* [VSCode Extension](https://github.com/TabbyML/tabby/tree/main/clients/vscode) – Install from the [marketplace](https://marketplace.visualstudio.com/items?itemName=TabbyML.vscode-tabby), or [open-vsx.org](https://open-vsx.org/extension/TabbyML/vscode-tabby)\n* [VIM Extension](https://github.com/TabbyML/tabby/tree/main/clients/vim)\n* [IntelliJ Platform Plugin](https://github.com/TabbyML/tabby/tree/main/clients/intellij) – Install from the [marketplace](https://plugins.jetbrains.com/plugin/22379-tabby)\n",
        "contact": {
            "name": "TabbyML Team"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://github.com/TabbyML/tabby/blob/main/LICENSE"
        },
        "version": "0.28.0"
    },
    "servers": [
        {
            "url": "/",
            "description": "Server"
        }
    ],
    "paths": {
        "/v1/chat/completions": {
            "post": {
                "tags": [
                    "v1"
                ],
                "operationId": "chat_completions",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "text/event-stream": {}
                        }
                    },
                    "405": {
                        "description": "When chat model is not specified, the endpoint returns 405 Method Not Allowed"
                    },
                    "422": {
                        "description": "When the prompt is malformed, the endpoint returns 422 Unprocessable Entity"
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/v1/completions": {
            "post": {
                "tags": [
                    "v1"
                ],
                "operationId": "completion",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CompletionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CompletionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/v1/events": {
            "post": {
                "tags": [
                    "v1"
                ],
                "operationId": "event",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LogEventRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/v1/health": {
            "get": {
                "tags": [
                    "v1"
                ],
                "operationId": "health",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HealthState"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/v1beta/ingestion": {
            "post": {
                "tags": [
                    "v1beta"
                ],
                "operationId": "ingestion",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IngestionRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Accepted, Waiting to be processed",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/v1beta/ingestion/{source}": {
            "delete": {
                "tags": [
                    "v1beta"
                ],
                "operationId": "delete_ingestion_source",
                "parameters": [
                    {
                        "name": "source",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted, Waiting to be processed",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/v1beta/ingestion/{source}/{id}": {
            "delete": {
                "tags": [
                    "v1beta"
                ],
                "operationId": "delete_ingestion",
                "parameters": [
                    {
                        "name": "source",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted, Waiting to be processed",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/v1beta/server_setting": {
            "get": {
                "tags": [
                    "v1beta"
                ],
                "operationId": "config",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerSetting"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Choice": {
                "type": "object",
                "required": [
                    "index",
                    "text"
                ],
                "properties": {
                    "index": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 0
                    },
                    "text": {
                        "type": "string"
                    }
                }
            },
            "CompletionRequest": {
                "type": "object",
                "properties": {
                    "language": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "Language identifier, full list is maintained at\nhttps://code.visualstudio.com/docs/languages/identifiers",
                        "example": "python"
                    },
                    "segments": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/Segments",
                                "description": "When segments are set, the `prompt` is ignored during the inference."
                            }
                        ]
                    },
                    "user": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "A unique identifier representing your end-user, which can help Tabby to monitor & generating\nreports."
                    },
                    "debug_options": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/DebugOptions"
                            }
                        ]
                    },
                    "temperature": {
                        "type": [
                            "number",
                            "null"
                        ],
                        "format": "float",
                        "description": "The temperature parameter for the model, used to tune variance and \"creativity\" of the model output"
                    },
                    "seed": {
                        "type": [
                            "integer",
                            "null"
                        ],
                        "format": "int64",
                        "description": "The seed used for randomly selecting tokens",
                        "minimum": 0
                    },
                    "mode": {
                        "type": "string",
                        "description": "The mode for completion. Use 'standard' for normal code completions or 'next_edit_suggestion'\nto predict the next edit the user will make."
                    }
                },
                "example": {
                    "language": "python",
                    "segments": {
                        "prefix": "def fib(n):\n    ",
                        "suffix": "\n        return fib(n - 1) + fib(n - 2)"
                    }
                }
            },
            "CompletionResponse": {
                "type": "object",
                "required": [
                    "id",
                    "choices"
                ],
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "choices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Choice"
                        }
                    },
                    "debug_data": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/DebugData"
                            }
                        ]
                    },
                    "mode": {
                        "type": "string"
                    }
                },
                "example": {
                    "choices": [
                        {
                            "index": 0,
                            "text": "string"
                        }
                    ],
                    "id": "string"
                }
            },
            "DebugData": {
                "type": "object",
                "properties": {
                    "snippets": {
                        "type": [
                            "array",
                            "null"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/Snippet"
                        }
                    },
                    "prompt": {
                        "type": [
                            "string",
                            "null"
                        ]
                    }
                }
            },
            "DebugOptions": {
                "type": "object",
                "properties": {
                    "raw_prompt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "When `raw_prompt` is specified, it will be passed directly to the inference engine for completion. `segments` field in `CompletionRequest` will be ignored.\n\nThis is useful for certain requests that aim to test the tabby's e2e quality."
                    },
                    "return_snippets": {
                        "type": "boolean",
                        "description": "When true, returns `snippets` in `debug_data`."
                    },
                    "return_prompt": {
                        "type": "boolean",
                        "description": "When true, returns `prompt` in `debug_data`."
                    },
                    "disable_retrieval_augmented_code_completion": {
                        "type": "boolean",
                        "description": "When true, disable retrieval augmented code completion."
                    }
                }
            },
            "Declaration": {
                "type": "object",
                "description": "A snippet of declaration code that is relevant to the current completion request.",
                "required": [
                    "filepath",
                    "body"
                ],
                "properties": {
                    "filepath": {
                        "type": "string",
                        "description": "Filepath of the file where the snippet is from.\n- When the file belongs to the same workspace as the current file,\n  this is a relative filepath, use the same rule as [Segments::filepath].\n- When the file located outside the workspace, such as in a dependency package,\n  this is a file URI with an absolute filepath."
                    },
                    "body": {
                        "type": "string",
                        "description": "Body of the snippet."
                    }
                }
            },
            "EditHistory": {
                "type": "object",
                "description": "Contains information about edit history for next edit suggestion mode",
                "required": [
                    "original_code",
                    "edits_diff",
                    "current_version"
                ],
                "properties": {
                    "original_code": {
                        "type": "string"
                    },
                    "edits_diff": {
                        "type": "string",
                        "description": "Unified git-style diff of all edits made to the file"
                    },
                    "current_version": {
                        "type": "string",
                        "description": "Current version of the code after all edits"
                    }
                }
            },
            "HealthState": {
                "type": "object",
                "required": [
                    "device",
                    "arch",
                    "cpu_info",
                    "cpu_count",
                    "cuda_devices",
                    "version"
                ],
                "properties": {
                    "model": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "chat_model": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "chat_device": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "device": {
                        "type": "string"
                    },
                    "arch": {
                        "type": "string"
                    },
                    "cpu_info": {
                        "type": "string"
                    },
                    "cpu_count": {
                        "type": "integer",
                        "minimum": 0
                    },
                    "cuda_devices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "version": {
                        "$ref": "#/components/schemas/Version"
                    },
                    "webserver": {
                        "type": [
                            "boolean",
                            "null"
                        ]
                    }
                }
            },
            "IngestionRequest": {
                "type": "object",
                "required": [
                    "source",
                    "id",
                    "title",
                    "body"
                ],
                "properties": {
                    "source": {
                        "type": "string",
                        "description": "Source of the document (frontend available, backend sourceId: `ingestedSource:${source}`)"
                    },
                    "id": {
                        "type": "string",
                        "description": "unique whthin the same source"
                    },
                    "title": {
                        "type": "string"
                    },
                    "body": {
                        "type": "string"
                    },
                    "link": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "ttl": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "Time-to-live duration (optional). Duration string like \"90d\""
                    }
                }
            },
            "IngestionResponse": {
                "type": "object",
                "required": [
                    "id",
                    "source",
                    "message"
                ],
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "source": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            },
            "LogEventRequest": {
                "type": "object",
                "required": [
                    "type",
                    "completion_id",
                    "choice_index"
                ],
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Event type, should be `view`, `select` or `dismiss`.",
                        "example": "view"
                    },
                    "completion_id": {
                        "type": "string"
                    },
                    "choice_index": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 0
                    },
                    "view_id": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "elapsed": {
                        "type": [
                            "integer",
                            "null"
                        ],
                        "format": "int32",
                        "minimum": 0
                    }
                }
            },
            "Segments": {
                "type": "object",
                "required": [
                    "prefix"
                ],
                "properties": {
                    "prefix": {
                        "type": "string",
                        "description": "Content that appears before the cursor in the editor window."
                    },
                    "suffix": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "Content that appears after the cursor in the editor window."
                    },
                    "filepath": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The relative path of the file that is being edited.\n- When [Segments::git_url] is set, this is the path of the file in the git repository.\n- When [Segments::git_url] is empty, this is the path of the file in the workspace."
                    },
                    "git_url": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The remote URL of the current git repository.\nLeave this empty if the file is not in a git repository,\nor the git repository does not have a remote URL."
                    },
                    "declarations": {
                        "type": [
                            "array",
                            "null"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/Declaration"
                        },
                        "description": "The relevant declaration code snippets provided by the editor's LSP,\ncontain declarations of symbols extracted from [Segments::prefix]."
                    },
                    "relevant_snippets_from_changed_files": {
                        "type": [
                            "array",
                            "null"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/Snippet"
                        },
                        "description": "The relevant code snippets extracted from recently edited files.\nThese snippets are selected from candidates found within code chunks\nbased on the edited location.\nThe current editing file is excluded from the search candidates.\n\nWhen provided alongside [Segments::declarations], the snippets have\nalready been deduplicated to ensure no duplication with entries\nin [Segments::declarations].\n\nSorted in descending order of [Snippet::score]."
                    },
                    "relevant_snippets_from_recently_opened_files": {
                        "type": [
                            "array",
                            "null"
                        ],
                        "items": {
                            "$ref": "#/components/schemas/Snippet"
                        },
                        "description": "The relevant code snippets extracted from recently opened files.\nThese snippets are selected from candidates found within code chunks\nbased on the last visited location.\n\nCurrent Active file is excluded from the search candidates.\nWhen provided with [Segments::relevant_snippets_from_changed_files], the snippets have\nalready been deduplicated to ensure no duplication with entries\nin [Segments::relevant_snippets_from_changed_files]."
                    },
                    "clipboard": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "Clipboard content when requesting code completion."
                    },
                    "edit_history": {
                        "oneOf": [
                            {
                                "type": "null"
                            },
                            {
                                "$ref": "#/components/schemas/EditHistory",
                                "description": "Required when mode is 'next_edit_suggestion'. Contains information about edit history."
                            }
                        ]
                    }
                }
            },
            "ServerSetting": {
                "type": "object",
                "required": [
                    "disable_client_side_telemetry"
                ],
                "properties": {
                    "disable_client_side_telemetry": {
                        "type": "boolean"
                    }
                }
            },
            "Snippet": {
                "type": "object",
                "required": [
                    "filepath",
                    "body",
                    "score"
                ],
                "properties": {
                    "filepath": {
                        "type": "string"
                    },
                    "body": {
                        "type": "string"
                    },
                    "score": {
                        "type": "number",
                        "format": "float"
                    }
                }
            },
            "Version": {
                "type": "object",
                "required": [
                    "build_date",
                    "build_timestamp",
                    "git_sha",
                    "git_describe"
                ],
                "properties": {
                    "build_date": {
                        "type": "string"
                    },
                    "build_timestamp": {
                        "type": "string"
                    },
                    "git_sha": {
                        "type": "string"
                    },
                    "git_describe": {
                        "type": "string"
                    }
                }
            }
        },
        "securitySchemes": {
            "token": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "token"
            }
        }
    }
}